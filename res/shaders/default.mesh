#version 460

#extension GL_EXT_mesh_shader : enable

#include "cen.glsl"
#include "visibility_buffer/visibility.glsl"

#ifndef WORKGROUP_SIZE_X
#define WORKGROUP_SIZE_X 64
#endif

#define MAX_VERTICES_PER_THREAD ((MAX_MESHLET_VERTICES + WORKGROUP_SIZE_X - 1) / WORKGROUP_SIZE_X)
#define MAX_PRIMITIVES_PER_THREAD ((MAX_MESHLET_PRIMTIVES + WORKGROUP_SIZE_X - 1) / WORKGROUP_SIZE_X)

layout (location = 0) out VsOut {
    flat uint drawId;
    flat uint meshletId;
    vec2 uv;
} meshOut[];

layout (push_constant) uniform Push {
    GlobalDataRef globalDataRef;
    MeshletInstanceBuffer meshletInstanceBuffer;
    int alphaPass;
    int padding;
};

shared vec3 vertexClip[MAX_MESHLET_VERTICES];
shared uint sharedPassedPrimitives;

layout (local_size_x = WORKGROUP_SIZE_X) in;
layout (triangles, max_vertices = MAX_MESHLET_VERTICES, max_primitives = MAX_MESHLET_PRIMTIVES) out;
void main() {

    uint offset = 0;
    if (alphaPass != 0) {
        offset = (MAX_MESHLET_INSTANCE - 1) - meshletInstanceBuffer.alphaCount;
    }

    uint threadIndex = gl_LocalInvocationIndex;
    if (threadIndex == 0) {
        sharedPassedPrimitives = 0;
    }
    barrier();

    GPUCamera camera = globalDataRef.globalData.cameraBufferRef[globalDataRef.globalData.primaryCamera].camera;

    uint workGroupIndex = gl_WorkGroupID.x + gl_NumWorkGroups.x * gl_WorkGroupID.y;
    uint meshletIndex = workGroupIndex + offset;
    if (alphaPass == 0 && workGroupIndex >= meshletInstanceBuffer.opaqueCount ||
        alphaPass != 0 && workGroupIndex >= meshletInstanceBuffer.alphaCount) {
        SetMeshOutputsEXT(0, 0);
        return;
    }
    MeshletInstance instance = meshletInstanceBuffer.instances[meshletIndex];
    Meshlet meshlet = globalDataRef.globalData.meshletBufferRef.meshlets[instance.meshletId];

    SetMeshOutputsEXT(meshlet.indexCount, meshlet.primitiveCount);

    for (uint i = 0; i < MAX_VERTICES_PER_THREAD; i++) {
        const uint id = min(threadIndex + i * WORKGROUP_SIZE_X, meshlet.indexCount - 1);
        uint index = globalDataRef.globalData.indexBufferRef.indices[meshlet.indexOffset + id] + meshlet.vertexOffset;
        Vertex vertex = globalDataRef.globalData.vertexBufferRef.vertices[index];
        vec4 fragPos = globalDataRef.globalData.transformsBufferRef.transforms[instance.meshId] * vec4(vertex.position, 1.0);
        vec4 clipPos = camera.projection * camera.view * fragPos;

        vertexClip[id] = vec3((clipPos.xy / clipPos.w * 0.5 + vec2(0.5)) * globalDataRef.globalData.screenSize, clipPos.w);

        meshOut[threadIndex].drawId = instance.meshId;
        meshOut[threadIndex].meshletId = meshletIndex;
        meshOut[threadIndex].uv = vertex.uv;

        gl_MeshVerticesEXT[threadIndex].gl_Position = clipPos;
    }

    for (uint i = 0; i < MAX_PRIMITIVES_PER_THREAD; i++) {
        uint id = min(threadIndex + i * WORKGROUP_SIZE_X, meshlet.primitiveCount - 1);
        uint a = globalDataRef.globalData.primitiveBufferRef.primitives[meshlet.primitiveOffset + id * 3 + 0];
        uint b = globalDataRef.globalData.primitiveBufferRef.primitives[meshlet.primitiveOffset + id * 3 + 1];
        uint c = globalDataRef.globalData.primitiveBufferRef.primitives[meshlet.primitiveOffset + id * 3 + 2];

        gl_PrimitiveTriangleIndicesEXT[id] = uvec3(a, b, c);
        gl_MeshPrimitivesEXT[id].gl_PrimitiveID = int(id);

        // small primitive culling from
        // https://github.com/zeux/niagara/blob/master/src/shaders/meshlet.mesh.glsl
        bool culled = false;

        vec2 pa = vertexClip[a].xy;
        vec2 pb = vertexClip[b].xy;
        vec2 pc = vertexClip[c].xy;

        vec2 eb = pb - pa;
        vec2 ec = pc - pa;

        culled = culled || (eb.x * ec.y >= eb.y * ec.x);

        vec2 bmin = min(pa, min(pb, pc));
        vec2 bmax = max(pa, max(pb, pc));
        float sbprec = 1.0 / 256.0;

        culled = culled || (round(bmin.x - sbprec) == round(bmax.x) || round(bmin.y) == round(bmax.y + sbprec));
        culled = culled && (vertexClip[a].z > 0 && vertexClip[b].z > 0 && vertexClip[c].z > 0);

        if (!culled) {
            atomicAdd(sharedPassedPrimitives, 1);
        }

        gl_MeshPrimitivesEXT[id].gl_CullPrimitiveEXT = culled;
    }

    barrier();
    if (threadIndex == 0) {
        atomicAdd(globalDataRef.globalData.feedbackInfoRef.info.trianglesDrawn, sharedPassedPrimitives);
    }
}