#version 460

#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_buffer_reference2 : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable

#include "cen.glsl"

layout (push_constant) uniform Push {
    GlobalDataRef globalDataRef;
    MeshletInstanceBuffer meshletInstanceInputBuffer;
    MeshletInstanceBuffer meshletInstanceOutputBuffer;
    int cameraIndex;
    int alphaPass;
};

bool frustumCheck(vec3 pos, float radius) {
    GPUCamera cullingCamera = globalDataRef.globalData.cameraBufferRef[cameraIndex].camera;

    for (int i = 0; i < 6; i++) {
        if (dot(vec4(pos, 1.0), cullingCamera.frustum.planes[i]) + radius < 0.0) {
            return false;
        }
    }
    return true;
}

layout (local_size_x = 64) in;
void main() {

    uint offset = 0;
    uint count = meshletInstanceInputBuffer.opaqueCount;
    if (alphaPass != 0) {
        offset = (MAX_MESHLET_INSTANCE - 1) - meshletInstanceInputBuffer.alphaCount;
        count = meshletInstanceInputBuffer.alphaCount;
    }

    uint threadIndex = gl_GlobalInvocationID.x;
    uint instanceIndex = offset + threadIndex;

    if (instanceIndex >= globalDataRef.globalData.maxMeshletCount)
        return;

    bool visible = false;
    if (threadIndex >= count)
        return;

    MeshletInstance instance = meshletInstanceInputBuffer.instances[instanceIndex];
    Meshlet meshlet = globalDataRef.globalData.meshletBufferRef.meshlets[instance.meshletId];
    vec3 center = (globalDataRef.globalData.transformsBufferRef.transforms[instance.meshId] * vec4(meshlet.center, 1.0)).xyz;
    visible = frustumCheck(center, meshlet.radius);
    atomicAdd(globalDataRef.globalData.feedbackInfoRef.info.meshletsTotal, 1);
    if (visible) {
        uint index;
        if (alphaPass == 0) {
            index = atomicAdd(meshletInstanceOutputBuffer.opaqueCount, 1);
        } else {
            uint offset = atomicAdd(meshletInstanceOutputBuffer.alphaCount, 1);
            index = (MAX_MESHLET_INSTANCE - 1) - (offset + 1);
        }
        atomicAdd(globalDataRef.globalData.feedbackInfoRef.info.meshletsDrawn, 1);
        meshletInstanceOutputBuffer.instances[index] = instance;
    }
}
