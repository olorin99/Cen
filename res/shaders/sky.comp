#version 460

#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_buffer_reference2 : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable

#include "canta.glsl"
#include "cen.glsl"
#include "visibility_buffer/visibility.glsl"

layout (rg32ui, set = 0, binding = CANTA_BINDLESS_STORAGE_IMAGES) uniform readonly uimage2D storageImages[];
layout (set = 0, binding = CANTA_BINDLESS_STORAGE_IMAGES) uniform writeonly image2D storageImagesOutput[];

layout (push_constant) uniform PushData {
    GlobalDataRef globalDataRef;
    int backbufferIndex;
    int sunIndex;
};

vec3 hue2rgb(float hue) {
    hue = fract(hue);
    float r = abs(hue * 6 - 3) - 1;
    float g = 2 - abs(hue * 6 - 2);
    float b = 2 - abs(hue * 6 - 4);
    return clamp(vec3(r, g, b), vec3(0), vec3(1));
}

layout (local_size_x = 32, local_size_y = 32) in;
void main() {

    ivec2 globCoords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 outputSize = imageSize(storageImagesOutput[backbufferIndex]);
    if (any(greaterThanEqual(globCoords, outputSize)))
        return;

    vec2 texCoords = vec2(globCoords) / vec2(outputSize);

    const GPUCamera camera = globalDataRef.globalData.cameraBufferRef[globalDataRef.globalData.primaryCamera].camera;
    GPULight sunLight;
    if (sunIndex < 0) {
        sunLight.position = vec3(0, 0, 0);
        sunLight.intensity = 0;
    }
    else
        sunLight = globalDataRef.globalData.lightBufferRef[sunIndex].light;

    vec3 origin = camera.position;
    vec4 p = normalize(inverse(camera.projection * camera.view) * vec4(texCoords * 2 - 1, 0, 1));
//    p /= p.w;

    vec3 direction = normalize(p.xyz - origin);

    vec3 skyHorizonColour = vec3(209 / 256.f, 214 / 256.f, 252 / 256.f);
    vec3 skyZenithColour = vec3(1 / 256.f, 11 / 256.f, 124 / 256.f);
    vec3 groundColour = vec3(56 / 256.f, 46 / 256.f, 22 / 256.f);
    float sunFocus = 0.00001;

//    float skyGradientT = pow(smoothstep(0, 0.4, direction.y), 0.35);
    float skyGradientT = pow(smoothstep(0, 0.4, p.y), 0.35);
    vec3 skyGradient = mix(skyHorizonColour, skyZenithColour, skyGradientT);
    float sun = max(0, dot(p.xyz, sunLight.position)) * sunLight.intensity;

    float groundToSkyT = smoothstep(-0.01, 0, p.y);
    float sunMask = float(groundToSkyT >= 1);
    vec3 colour = mix(groundColour, skyGradient, groundToSkyT) + sun * sunMask;

    vec4 result = vec4(colour, 1.0);
//    vec4 result = vec4(skyGradient, 1.0);
//    vec4 result = vec4(p.xyz, 1.0);

    imageStore(storageImagesOutput[backbufferIndex], globCoords, result);
}
