#version 460

#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_buffer_reference2 : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable

#include "canta.glsl"
#include "cen.glsl"

layout (rgba32f, set = 0, binding = CANTA_BINDLESS_STORAGE_IMAGES) uniform readonly image2D storageImages[];
layout (set = 0, binding = CANTA_BINDLESS_STORAGE_IMAGES) uniform writeonly image2D storageImagesOutput[];

layout (push_constant) uniform Push {
    GlobalDataRef globalDataRef;
    int hdrBackbuffer;
    int backbuffer;
    int modeIndex;
    int padding;
};

vec3 uncharted2Tonemap(vec3 x) {
    float A = 0.15;
    float B = 0.50;
    float C = 0.10;
    float D = 0.20;
    float E = 0.02;
    float F = 0.30;
    return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}


// from https://www.shadertoy.com/view/WdjSW3

vec3 reinhard(vec3 x) {
    return x / (1.0 + x);
}

vec3 reinhard2(vec3 x) {
    const float white = 4.0;
    return (x * (1.0 + x / (white * white))) / (1.0 + x);
}

vec3 aces(vec3 x) {
    float a = 2.51;
    float b = 0.03;
    float c = 2.43;
    float d = 0.59;
    float e = 0.14;
    return (x * (a * x + b)) / (x * (c * x + d) + e);
}

vec3 unreal(vec3 x) {
    return x / (x + 0.155) * 1.019;
}

vec3 lottes(vec3 x) {
    const vec3 a = vec3(1.6);
    const vec3 d = vec3(0.977);
    const vec3 hdrMax = vec3(8.0);
    const vec3 midIn = vec3(0.18);
    const vec3 midOut = vec3(0.267);

    const vec3 b =
    (-pow(midIn, a) + pow(hdrMax, a) * midOut) /
    ((pow(hdrMax, a * d) - pow(midIn, a * d)) * midOut);
    const vec3 c =
    (pow(hdrMax, a * d) * pow(midIn, a) - pow(hdrMax, a) * pow(midIn, a * d) * midOut) /
    ((pow(hdrMax, a * d) - pow(midIn, a * d)) * midOut);
    return pow(x, a) / (pow(x, a * d) * b + c);
}

vec3 Tonemap_Uchimura(vec3 x, vec3 P, vec3 a, vec3 m, vec3 l, vec3 c, vec3 b) {
    vec3 l0 = ((P - m) * l) / a;
    vec3 L0 = m - m / a;
    vec3 L1 = m + (1.0 - m) / a;
    vec3 S0 = m + l0;
    vec3 S1 = m + a * l0;
    vec3 C2 = (a * P) / (P - S1);
    vec3 CP = -C2 / P;

    vec3 w0 = 1.0 - smoothstep(vec3(0.0), m, x);
    vec3 w2 = step(m + l0, x);
    vec3 w1 = 1.0 - w0 - w2;

    vec3 T = m * pow(x / m, c) + b;
    vec3 S = P - (P - S1) * exp(CP * (x - S0));
    vec3 L = m + a * (x - m);

    return T * w0 + L * w1 + S * w2;
}

vec3 uchimara(vec3 x) {
    const vec3 P = vec3(1.0);  // max display brightness
    const vec3 a = vec3(1.0);  // contrast
    const vec3 m = vec3(0.22); // linear section start
    const vec3 l = vec3(0.4);  // linear section length
    const vec3 c = vec3(1.33); // black
    const vec3 b = vec3(0.0);  // pedestal
    return Tonemap_Uchimura(x, P, a, m, l, c, b);
}


// agx from https://www.shadertoy.com/view/cd3XWr

vec3 agxDefaultContrastApprox(vec3 x) {
    vec3 x2 = x * x;
    vec3 x4 = x2 * x2;
    return 15.5     * x4 * x2
    - 40.14     * x4 * x
    + 31.96     * x4
    - 6.868     * x2 * x
    + 0.4298    * x2
    + 0.1191    * x
    - 0.00232;
}

vec3 agx(vec3 x) {
    const mat3 agxMat = mat3(
    0.842479062253094, 0.0423282422610123, 0.0423756549057051,
    0.0784335999999992,  0.878468636469772,  0.0784336,
    0.0792237451477643, 0.0791661274605434, 0.879142973793104);

    const float minEV = -12.47393;
    const float maxEV = 4.026069;

    // input transform
    x = agxMat * x;
    // log2 space encoding
    x = clamp(log2(x), minEV, maxEV);
    x = (x - minEV) / (maxEV - minEV);

    // apply sigmoid functoin approximation
    x = agxDefaultContrastApprox(x);
    return x;
}

vec3 agxEotf(vec3 x) {
    const mat3 agxMatInv = mat3(
    1.19687900512017, -0.0528968517574562, -0.0529716355144438,
    -0.0980208811401368, 1.15190312990417, -0.0980434501171241,
    -0.0990297440797205, -0.0989611768448433, 1.15107367264116);

    //undo input transform
    x = agxMatInv * x;
    return x;
}

vec3 agxLook(vec3 x) {
    const vec3 lw = vec3(0.2126, 0.7152, 0.0722);
    float luma = dot(x, lw);

    vec3 offset = vec3(0.0);
    vec3 slope = vec3(1.0);
    vec3 power = vec3(1.0);
    float sat = 1.0;

    //golden
    //    slope = vec3(1.0, 0.9, 0.5);
    //    power = vec3(0.8);
    //    sat = 0.8;

    //punchy
    //    slope = vec3(1.0);
    //    power = vec3(1.35, 1.35, 1.35);
    //    sat = 1.4;

    x = pow(x * slope + offset, power);
    return luma + sat * (x - luma);
}

layout (local_size_x = 32, local_size_y = 32) in;
void main() {

    ivec2 globCoords = ivec2(gl_GlobalInvocationID.xy);

    ivec2 inputSize = imageSize(storageImages[hdrBackbuffer]);
    ivec2 outputSize = imageSize(storageImagesOutput[backbuffer]);

    if (any(greaterThanEqual(globCoords, outputSize)))
        return;

    vec3 hdr = imageLoad(storageImages[hdrBackbuffer], globCoords).rgb;

    vec3 result = vec3(0.0);
    switch (modeIndex) {
        case 0:
            result = agx(hdr * globalDataRef.globalData.exposure);
            result = agxLook(result);
            result = agxEotf(result);
            break;
        case 1:
            result = aces(hdr * globalDataRef.globalData.exposure);
            break;
        case 2:
            result = reinhard(hdr * globalDataRef.globalData.exposure);
            break;
        case 3:
            result = reinhard2(hdr * globalDataRef.globalData.exposure);
            break;
        case 4:
            result = lottes(hdr * globalDataRef.globalData.exposure);
            break;
        case 5:
            result = uchimara(hdr * globalDataRef.globalData.exposure);
            break;
    }

    imageStore(storageImagesOutput[backbuffer], globCoords, vec4(result, 1.0));
}
