#version 460

#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_buffer_reference2 : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable

#include "cen.glsl"
#include "visibility_buffer/visibility.glsl"

#ifndef WORKGROUP_SIZE_X
#define WORKGROUP_SIZE_X 64
#endif

#define MAX_VERTICES_PER_THREAD ((MAX_MESHLET_VERTICES + WORKGROUP_SIZE_X - 1) / WORKGROUP_SIZE_X)
#define MAX_PRIMITIVES_PER_THREAD ((MAX_MESHLET_PRIMTIVES + WORKGROUP_SIZE_X - 1) / WORKGROUP_SIZE_X)

struct DrawIndirectCommand {
    uint vertexCount;
    uint instanceCount;
    uint firstVertex;
    uint firstInstance;
};
layout (scalar, buffer_reference, buffer_reference_align = 4) writeonly buffer DrawCommandBuffer {
    uint drawCount;
    DrawIndirectCommand commands[];
};

layout (push_constant) uniform Push {
    GlobalDataRef globalDataRef;
    MeshletInstanceBuffer meshletInstanceBuffer;
    MeshletIndexBuffer meshletIndexBuffer;
    DrawCommandBuffer drawCommandBuffer;
};

shared uint sharedIndexOffset;
shared uint sharedPrimitivesPassed;
shared uint sharedPrimitiveId;
shared bool sharedCulled[MAX_MESHLET_PRIMTIVES];

layout (local_size_x = WORKGROUP_SIZE_X) in;
void main() {

    uint threadIndex = gl_LocalInvocationIndex;
    if (threadIndex == 0) {
        sharedIndexOffset = 0;
        sharedPrimitivesPassed = 0;
        sharedPrimitiveId = 0;
    }
    barrier();

    uint meshletIndex = gl_WorkGroupID.x + gl_NumWorkGroups.x * gl_WorkGroupID.y;
    if (meshletIndex >= meshletInstanceBuffer.opaqueCount) {
        return;
    }

    GPUCamera camera = globalDataRef.globalData.cameraBufferRef[globalDataRef.globalData.primaryCamera].camera;
    MeshletInstance instance = meshletInstanceBuffer.instances[meshletIndex];
    Meshlet meshlet = globalDataRef.globalData.meshletBufferRef.meshlets[instance.meshletId];

    for (uint i = 0; i < MAX_PRIMITIVES_PER_THREAD; i++) {
        uint id = min(threadIndex + i * WORKGROUP_SIZE_X, meshlet.primitiveCount - 1);

        uint a = globalDataRef.globalData.primitiveBufferRef.primitives[meshlet.primitiveOffset + id * 3 + 0];
        uint b = globalDataRef.globalData.primitiveBufferRef.primitives[meshlet.primitiveOffset + id * 3 + 1];
        uint c = globalDataRef.globalData.primitiveBufferRef.primitives[meshlet.primitiveOffset + id * 3 + 2];

        uint indexA = globalDataRef.globalData.indexBufferRef.indices[meshlet.indexOffset + a] + meshlet.vertexOffset;
        uint indexB = globalDataRef.globalData.indexBufferRef.indices[meshlet.indexOffset + b] + meshlet.vertexOffset;
        uint indexC = globalDataRef.globalData.indexBufferRef.indices[meshlet.indexOffset + c] + meshlet.vertexOffset;

        Vertex vertexA = globalDataRef.globalData.vertexBufferRef.vertices[indexA];
        Vertex vertexB = globalDataRef.globalData.vertexBufferRef.vertices[indexB];
        Vertex vertexC = globalDataRef.globalData.vertexBufferRef.vertices[indexC];

        vec4 fragPosA = globalDataRef.globalData.transformsBufferRef.transforms[instance.meshId] * vec4(vertexA.position, 1.0);
        vec4 fragPosB = globalDataRef.globalData.transformsBufferRef.transforms[instance.meshId] * vec4(vertexB.position, 1.0);
        vec4 fragPosC = globalDataRef.globalData.transformsBufferRef.transforms[instance.meshId] * vec4(vertexC.position, 1.0);

        vec4 clipPosA = camera.projection * camera.view * fragPosA;
        vec4 clipPosB = camera.projection * camera.view * fragPosB;
        vec4 clipPosC = camera.projection * camera.view * fragPosC;

        vec3 vertexClipA = vec3((clipPosA.xy / clipPosA.w * 0.5 + vec2(0.5)) * globalDataRef.globalData.screenSize, clipPosA.w);
        vec3 vertexClipB = vec3((clipPosB.xy / clipPosB.w * 0.5 + vec2(0.5)) * globalDataRef.globalData.screenSize, clipPosB.w);
        vec3 vertexClipC = vec3((clipPosC.xy / clipPosC.w * 0.5 + vec2(0.5)) * globalDataRef.globalData.screenSize, clipPosC.w);

        bool culled = false;

        vec2 pa = vertexClipA.xy;
        vec2 pb = vertexClipB.xy;
        vec2 pc = vertexClipC.xy;

        vec2 eb = pb - pa;
        vec2 ec = pc - pa;

        culled = culled || (eb.x * ec.y >= eb.y * ec.x);

        vec2 bmin = min(pa, min(pb, pc));
        vec2 bmax = max(pa, max(pb, pc));
        float sbprec = 1.0 / 256.0;

        culled = culled || (round(bmin.x - sbprec) == round(bmax.x) || round(bmin.y) == round(bmax.y + sbprec));
        culled = culled && (vertexClipA.z > 0 && vertexClipB.z > 0 && vertexClipC.z > 0);
        sharedCulled[id] = culled;
        if (!culled) {
            atomicAdd(sharedPrimitivesPassed, 1);
        }
    }

    barrier();
    if (sharedPrimitivesPassed == 0)
        return;

    if (threadIndex == 0) {
        sharedIndexOffset = atomicAdd(meshletIndexBuffer.indexCount, sharedPrimitivesPassed * 3);

    }
    barrier();
    if (sharedIndexOffset >= globalDataRef.globalData.maxIndirectIndexCount)
        return;
    barrier();

    if (threadIndex == 0) {
        atomicAdd(globalDataRef.globalData.feedbackInfoRef.info.trianglesDrawn, sharedPrimitivesPassed);
        uint drawIndex = atomicAdd(drawCommandBuffer.drawCount, 1);
        DrawIndirectCommand drawCommand;
        drawCommand.vertexCount = sharedPrimitivesPassed * 3;
        drawCommand.firstVertex = sharedIndexOffset;
        drawCommand.instanceCount = 1;
        drawCommand.firstInstance = 0;
        drawCommandBuffer.commands[drawIndex] = drawCommand;
    }

    for (uint i = 0; i < MAX_PRIMITIVES_PER_THREAD; i++) {
        uint id = min(threadIndex + i * WORKGROUP_SIZE_X, meshlet.primitiveCount - 1);

        if (!sharedCulled[id]) {
            uint index = atomicAdd(sharedPrimitiveId, 1);

            uint a = globalDataRef.globalData.primitiveBufferRef.primitives[meshlet.primitiveOffset + id * 3 + 0];
            uint b = globalDataRef.globalData.primitiveBufferRef.primitives[meshlet.primitiveOffset + id * 3 + 1];
            uint c = globalDataRef.globalData.primitiveBufferRef.primitives[meshlet.primitiveOffset + id * 3 + 2];

            uint indexOffset = sharedIndexOffset + index * 3;
            meshletIndexBuffer.indices[indexOffset + 0] = setMeshletId(meshletIndex) | setPrimitiveId(a);
            meshletIndexBuffer.indices[indexOffset + 1] = setMeshletId(meshletIndex) | setPrimitiveId(b);
            meshletIndexBuffer.indices[indexOffset + 2] = setMeshletId(meshletIndex) | setPrimitiveId(c);
        }

    }

}
