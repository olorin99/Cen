#version 460

#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_buffer_reference2 : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable

#include "cen.glsl"

layout (push_constant) uniform Push {
    GlobalDataRef globalDataRef;
    MeshletInstanceBuffer meshletInstanceBuffer;
    int cameraIndex;
    int testAlpha;
};

bool frustumCheck(vec3 pos, float radius) {
    GPUCamera cullingCamera = globalDataRef.globalData.cameraBufferRef[cameraIndex].camera;

    for (int i = 0; i < 6; i++) {
        if (dot(vec4(pos, 1.0), cullingCamera.frustum.planes[i]) + radius < 0.0) {
            return false;
        }
    }
    return true;
}

layout (local_size_x = 64) in;
void main() {

    uint threadIndex = gl_GlobalInvocationID.x;
    if (threadIndex >= globalDataRef.globalData.maxMeshCount)
        return;

    bool visible = false;
    GPUMesh mesh = globalDataRef.globalData.meshBufferRef.meshes[threadIndex];
    vec3 center = (mesh.max.xyz + mesh.min.xyz) * 0.5;
    center = (globalDataRef.globalData.transformsBufferRef.transforms[threadIndex] * vec4(center, 1.0)).xyz;
    vec3 halfExtent = (mesh.max.xyz - mesh.min.xyz) * 0.5;
    float radius = length(halfExtent);
    visible = frustumCheck(center, radius);
    atomicAdd(globalDataRef.globalData.feedbackInfoRef.info.meshesTotal, 1);
    if (visible) {
        uint index;
        if (mesh.alphaMapIndex < 0) { // opaque meshes
            index = atomicAdd(meshletInstanceBuffer.opaqueCount, mesh.meshletCount);
        } else if (mesh.alphaMapIndex >= 0) { // alpha meshes
            uint offset = atomicAdd(meshletInstanceBuffer.alphaCount, mesh.meshletCount);
            index = (MAX_MESHLET_INSTANCE - 1) - (offset + mesh.meshletCount);
        }
        atomicAdd(globalDataRef.globalData.feedbackInfoRef.info.meshesDrawn, 1);
        for (uint i = 0; i < mesh.meshletCount; i++) {
            MeshletInstance instance;
            instance.meshId = threadIndex;
            instance.meshletId = mesh.meshletOffset + i;
            meshletInstanceBuffer.instances[index + i] = instance;
        }
    }
}
